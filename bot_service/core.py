import json

import requests
from bot_service.tour_search import find_tours, get_city_id_by_name, get_country_id_by_name
from utils.config import load_config
from utils.db_helpers import (
    get_city_id_by_name,
    get_country_id_by_name,
    get_meal_id_by_name,
    get_hotel_category_id_by_name,
    get_resort_id_by_name,
)

config = load_config()
LLM_SERVICE_URL = config.get("llm_service", {}).get("url", "http://llm-service:8001/parse")

def parse_user_request_through_service(query: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ llm_service HTTP API
    """
    try:
        resp = requests.post(LLM_SERVICE_URL, json={"query": query}, timeout=60)
        if resp.status_code == 200:
            return resp.json()
        else:
            return {"error": f"LLM service {resp.status_code}", "details": resp.text}
    except Exception as e:
        return {"error": "llm_service_unavailable", "details": str(e)}



def enrich_with_reference_ids(params):
    # –≥–æ—Ä–æ–¥–∞ / —Å—Ç—Ä–∞–Ω—ã
    if params.get("departure_city") and not params.get("city_id"):
        cid = get_city_id_by_name(params["departure_city"])
        if cid:
            params["city_id"] = cid

    if params.get("country") and not params.get("country_id"):
        coid = get_country_id_by_name(params["country"])
        if coid:
            params["country_id"] = coid

    # –∫—É—Ä–æ—Ä—Ç (–µ—Å–ª–∏ LLM —É–ø–æ–º—è–Ω—É–ª)
    if params.get("resort") and not params.get("resort_id"):
        rid = get_resort_id_by_name(params["resort"])
        if rid:
            params["resort_id"] = rid

    # –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–µ–ª—è
    if params.get("hotel_category") and not params.get("hotel_category_id"):
        hid = get_hotel_category_id_by_name(params["hotel_category"])
        if hid:
            params["hotel_category_id"] = hid

    # –ø–∏—Ç–∞–Ω–∏–µ
    if params.get("meal") and not params.get("meal_id"):
        mid = get_meal_id_by_name(params["meal"])
        if mid:
            params["meal_id"] = mid

    return params

def process_user_query(user_text: str) -> str:
    # 1. –ø–æ–ª—É—á–∞–µ–º JSON –æ—Ç llm_service
    params = parse_user_request_through_service(user_text)
    print("=== RAW LLM response ===")
    print(params)
    params = enrich_with_reference_ids(params)
    if "error" in params:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ LLM-—Å–µ—Ä–≤–∏—Å–∞: {params}"

    params = enrich_with_reference_ids(params)
    print("=== After enrichment ===")
    print(json.dumps(params, indent=2, ensure_ascii=False))

    # 2. –∏—â–µ–º —Ç—É—Ä—ã –≤ SQLite
    tours = find_tours(params)
    if not tours:
        return "üòî –ù–µ –Ω–∞—à–ª–æ—Å—å —Ç—É—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è."

    # 3. —Å–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    reply = "üî• –ù–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç—É—Ä—ã:\n\n"
    for t in tours:
        reply += (f"üè® {t['hotel_name']} ({t['nights']} –Ω–æ—á–µ–π)\n"
                  f"üí∞ {t['price']} {t['currency']}\n"
                  f"üìÖ –ó–∞–µ–∑–¥: {t['check_in']}\n"
                  f"üîó {t['url']}\n\n")
    return reply